use crate::ast::{Item, Module};

pub fn emit_ts(m: &Module) -> String {
    let mut out = String::new();
    out.push_str("// Generated by weftc transpile-ts\n");
    out.push_str(&format!("export const moduleName = \"{}\";\n", m.name));
    out.push_str("export const effects = [");
    for (i, e) in m.effects.iter().enumerate() {
        if i > 0 {
            out.push(',');
        }
        out.push_str(&format!("\"{:?}\"", e));
    }
    out.push_str("] as const;\n");
    for it in &m.items {
        match it {
            Item::Actor { name } => {
                out.push_str(&format!("export class {} {{ /* body omitted */ }}\n", name));
            }
            Item::Func { name } => {
                out.push_str(&format!(
                    "export function {}(/* args */) {{ /* body omitted */ }}\n",
                    name
                ));
            }
        }
    }
    out
}
