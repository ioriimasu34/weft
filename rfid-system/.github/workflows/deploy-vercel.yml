name: Deploy to Vercel

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Test job for pull requests
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 1

  # Deploy job for main branch
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production',
              per_page: 1
            });
            
            if (deployments.length > 0) {
              const deployment = deployments[0];
              const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                per_page: 1
              });
              
              if (statuses.length > 0) {
                const status = statuses[0];
                if (status.state === 'success' && status.target_url) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: `üöÄ **Deployment Successful!**\n\nYour StitchOS RFID Dashboard has been deployed to:\nüîó **${status.target_url}**\n\n**Environment**: Production\n**Commit**: ${context.sha.substring(0, 7)}\n**Status**: ‚úÖ Success`
                  });
                }
              }
            }

  # Deploy to preview for develop branch
  deploy-preview:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--target=preview'

  # Performance monitoring
  lighthouse:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Security scan
  security-scan:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=moderate
        continue-on-error: true

  # Notify deployment status
  notify:
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [deploy, deploy-preview]
    
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const jobStatus = '${{ needs.deploy.result || needs.deploy-preview.result }}';
            const branch = '${{ github.ref_name }}';
            const commit = '${{ github.sha.substring(0, 7) }}';
            
            let status, message;
            if (jobStatus === 'success') {
              status = '‚úÖ Success';
              message = `üöÄ **Deployment Successful!**\n\n**Branch**: ${branch}\n**Commit**: ${commit}\n**Status**: ${status}\n\nYour StitchOS RFID Dashboard has been deployed successfully!`;
            } else if (jobStatus === 'failure') {
              status = '‚ùå Failed';
              message = `üö® **Deployment Failed!**\n\n**Branch**: ${branch}\n**Commit**: ${commit}\n**Status**: ${status}\n\nPlease check the deployment logs for more details.`;
            } else {
              status = '‚ö†Ô∏è Skipped';
              message = `‚ö†Ô∏è **Deployment Skipped**\n\n**Branch**: ${branch}\n**Commit**: ${commit}\n**Status**: ${status}\n\nDeployment was skipped due to configuration or dependencies.`;
            }
            
            // Create deployment status comment
            if (github.event_name === 'push') {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: message
              });
            }