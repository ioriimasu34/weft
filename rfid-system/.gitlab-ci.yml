stages:
  - test
  - build
  - deploy
  - monitor

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  SUPABASE_URL: $SUPABASE_URL
  SUPABASE_ANON_KEY: $SUPABASE_ANON_KEY
  SUPABASE_SERVICE_KEY: $SUPABASE_SERVICE_KEY

# Cache dependencies between jobs
cache:
  paths:
    - .cache/pip
    - .cache/npm
    - .cache/flutter

# Test Stage
test:backend:
  stage: test
  image: python:3.11-slim
  services:
    - postgres:15
    - redis:7-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    REDIS_URL: redis://redis:6379
  before_script:
    - pip install --cache-dir .cache/pip -r backend/requirements.txt
    - pip install pytest pytest-asyncio pytest-cov
  script:
    - cd backend
    - python -m pytest tests/ -v --cov=. --cov-report=xml
    - python -m pytest tests/ --cov=. --cov-report=html
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/htmlcov/index.html
    paths:
      - backend/htmlcov/
      - backend/coverage.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

test:frontend:
  stage: test
  image: node:18-alpine
  before_script:
    - cd frontend
    - npm ci --cache .cache/npm
  script:
    - npm run lint
    - npm run typecheck
    - npm run test:ci
  artifacts:
    paths:
      - frontend/coverage/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

test:mobile:
  stage: test
  image: cirrusci/flutter:3.16.9
  before_script:
    - cd mobile
    - flutter pub get
  script:
    - flutter analyze
    - flutter test
  artifacts:
    paths:
      - mobile/coverage/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build Stage
build:backend:
  stage: build
  image: python:3.11-slim
  before_script:
    - pip install --cache-dir .cache/pip -r backend/requirements.txt
    - pip install docker
  script:
    - cd backend
    - docker build -t stitchos-rfid-backend:$CI_COMMIT_SHA .
    - docker tag stitchos-rfid-backend:$CI_COMMIT_SHA stitchos-rfid-backend:latest
  artifacts:
    paths:
      - backend/
    expire_in: 1 week
  only:
    - main
    - develop

build:frontend:
  stage: build
  image: node:18-alpine
  before_script:
    - cd frontend
    - npm ci --cache .cache/npm
  script:
    - npm run build
    - npm run export
  artifacts:
    paths:
      - frontend/out/
    expire_in: 1 week
  only:
    - main
    - develop

build:mobile:android:
  stage: build
  image: cirrusci/flutter:3.16.9
  before_script:
    - cd mobile
    - flutter pub get
    - echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/keystore.jks
    - echo "$ANDROID_KEYSTORE_PASSWORD" > android/key.properties
    - echo "$ANDROID_KEY_PASSWORD" >> android/key.properties
  script:
    - flutter build apk --release
    - flutter build appbundle --release
  artifacts:
    paths:
      - mobile/build/app/outputs/flutter-apk/
      - mobile/build/app/outputs/bundle/release/
    expire_in: 1 month
  only:
    - tags

build:mobile:ios:
  stage: build
  image: cirrusci/flutter:3.16.9
  before_script:
    - cd mobile
    - flutter pub get
  script:
    - flutter build ios --release --no-codesign
  artifacts:
    paths:
      - mobile/build/ios/
    expire_in: 1 month
  only:
    - tags

# Deploy Stage
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "cd $STAGING_PATH && git pull origin develop"
    - ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "cd $STAGING_PATH && docker-compose -f infrastructure/docker-compose.yml up -d --build"
    - ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "cd $STAGING_PATH && make db-migrate"
  environment:
    name: staging
    url: https://staging.stitchos-rfid.com
  only:
    - develop

deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "cd $PROD_PATH && git pull origin main"
    - ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "cd $PROD_PATH && docker-compose -f infrastructure/docker-compose.yml up -d --build"
    - ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "cd $PROD_PATH && make db-migrate"
    - ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "cd $PROD_PATH && make backup"
  environment:
    name: production
    url: https://rfid.stitchos.com
  when: manual
  only:
    - main

# Monitor Stage
monitor:health:
  stage: monitor
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      # Health check for backend services
      curl -f http://$PROD_HOST:8001/healthz || exit 1
      curl -f http://$PROD_HOST:8002/healthz || exit 1
      curl -f http://$PROD_HOST:8003/healthz || exit 1
      
      # Database connectivity check
      curl -f "http://$PROD_HOST:8002/api/health/db" || exit 1
      
      # Redis connectivity check
      curl -f "http://$PROD_HOST:8002/api/health/redis" || exit 1
  environment:
    name: production
  only:
    - main
  when: always

# Security Scan
security:scan:
  stage: test
  image: alpine:latest
  before_script:
    - apk add --no-cache git
  script:
    - |
      # Run security checks
      echo "Running security scan..."
      
      # Check for secrets in code
      if git grep -i "password\|secret\|key\|token" -- "*.py" "*.js" "*.ts" "*.dart" | grep -v "test\|example\|dummy"; then
        echo "Potential secrets found in code!"
        exit 1
      fi
      
      # Check for hardcoded URLs/IPs
      if git grep -E "(http://|https://|ftp://)" -- "*.py" "*.js" "*.ts" "*.dart" | grep -v "localhost\|127.0.0.1\|example.com"; then
        echo "Hardcoded URLs found!"
        exit 1
      fi
      
      echo "Security scan passed!"
  only:
    - merge_requests
    - main
    - develop

# Performance Test
performance:test:
  stage: test
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      echo "Running performance tests..."
      
      # Test API response times
      START_TIME=$(date +%s%N)
      curl -s -o /dev/null -w "%{http_code}" "http://$STAGING_HOST:8002/api/health"
      END_TIME=$(date +%s%N)
      RESPONSE_TIME=$((($END_TIME - $START_TIME) / 1000000))
      
      echo "API Response Time: ${RESPONSE_TIME}ms"
      
      if [ $RESPONSE_TIME -gt 1000 ]; then
        echo "API response time too slow: ${RESPONSE_TIME}ms"
        exit 1
      fi
      
      echo "Performance test passed!"
  environment:
    name: staging
  only:
    - develop
  when: manual